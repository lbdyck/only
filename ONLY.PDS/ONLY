  /* -------------------  rexx procedure  -------------------- *
  | Name:      ONLY                                            |
  |                                                            |
  | Function:  ISPF Edit Macro to find one or both strings     |
  |                                                            |
  | Syntax:    ONLY string-1 string-2 find-options             |
  |         or ONLY ?                                          |
  |                                                            |
  |            ? will display an ISPF Tutorial                 |
  |                                                            |
  | Usage Notes: string 2 is required or the record is         |
  |              excluded.                                     |
  |                                                            |
  |              strings may be enclosed in quotes but it      |
  |              must be the same for both strings             |
  |                                                            |
  |              strings with & will be treated in hex so      |
  |              NO case insensitivity                         |
  |                                                            |
  |              An * only works for string-2                  |
  |                                                            |
  |              Find-options are WORD, PREFIX,                |
  |              start/end column, start/end labels            |
  |              - Word and Prefix only word for string-1      |
  |                                                            |
  | Author:    Lionel B. Dyck                                  |
  |                                                            |
  | History:  (most recent on top)                             |
  |            12/24/19 LBD - Clean up find report message     |
  |            12/21/19 LBD - Improve error checking/reporting |
  |            12/20/19 LBD - Support other find options       |
  |                           WORD, PREFIX labels columns      |
  |            12/04/19 LBD - Correct use with quotes          |
  |            11/27/19 LBD - enhancements                     |
  |            11/26/19 LBD - creation                         |
  |                                                            |
  * ---------------------------------------------------------- */
  Address ISREdit
  'Macro (search) NOPROCESS'

  /* ---------------------------- *
  | Reset the edit session first |
  * ---------------------------- */
  'reset'
  Address ISPExec ,
    'Control Errors Return'

/* ------------------------------- *
 | Check for tutorial/help request |
 * ------------------------------- */
  if strip(search) = '' then search = '?'
  if strip(search) = '?' then call do_help

  /* --------------------------------------------------------- *
  | 1. Find if the strings are in quotes.  If so they must be |
  |    using the same quote type ' or " on the exterior of    |
  |    the strings                                            |
  | 2. parse the provided strings                             |
  * --------------------------------------------------------- */
  search = strip(search)
  if pos(left(search,1),"'" '"') = 0 then
  parse value search with find1 find2
  else do
    if left(search,1) = '"' then do
      q = '"'
      parse value search with (q) find1 (q) find2
      find1 = q''find1''q
    end
    if left(search,1) = "'" then do
      q = "'"
      parse value search with (q) find1 (q) find2
      find1 = q''find1''q
    end
  end

  /* --------------------------------- *
  | Make sure the strings are striped |
  * --------------------------------- */
  find1 = strip(find1)
  find2 = strip(find2)
  if pos('&',find1 find2) = 0 then amp = 0
  else amp = 1

  findopt = ''
  fd = ''
  do i = 1 to words(find2)
    if left(word(find2,i),1) = '.' then do
      findopt = findopt word(find2,i)
      fd = fd i
    end
    if datatype(word(find2,i)) = 'NUM' then do
      findopt = findopt word(find2,i)
      fd = fd i
    end
    if wordpos(translate(word(find2,i)),'WORD PREFIX') > 0 then do
      findopt = findopt word(find2,i)
      fd = fd i
    end
  end
  if fd /= '' then do i = words(fd) to 1 by -1
    d = word(fd,i)
    find2 = delword(find2,d,1)
  end
  find2 = strip(find2)
  find2 = strip(find2,'B',"'")
  find2 = strip(find2,'B','"')
  find2u = translate(find2)
  find1x = c2x(find1)
  find2x = c2x(find2)

  /* -------------------------- *
  | Exclude all and get counts |
  * -------------------------- */
  'x all'
  '(x,excl) = exclude_counts'

  /* --------------------------------------- *
  | Now find the 1st string in all records  |
  | and get the find count and record count |
  * --------------------------------------- */

  if amp = 0
  then "find" find1 "all" findopt
  else "find x'"find1x"' all" findopt
  if rc > 4 then do
    'reset'
    zerrsm = zerrsm':' search
    'line_before 1 = msgline (zerrsm)'
    'line_before 1 = msgline (zerrlm)'
    exit
  end
  '(x,findhits) = find_counts'
  '(last) = linenum .zlast'
  hit = 0

  /* ----------------------------------------------- *
  | Seek (find) all string-1 and check for string-2 |
  | and if string2 not found then flip the record   |
  | BUT ONLY IF there is a 2nd string to find       |
  * ----------------------------------------------- */
  if strip(find2) /= '' then do
    if amp = 0
    then "seek" find1 "first nx"
    else "seek x'"find1x"' first nx"
    if rc = 0 then
    do forever
      '(line) = cursor'
      '(data) = line' line
      if amp = 1 then do
        find2u = find2x
        data = c2x(data)
        end
      if amp = 0 then
      data = translate(data)
      Select
        When pos(find2u,data) = 0 then do
          'Label' line '= .a'
          'flip .a .a'
          findhits = findhits - 1
        end
        Otherwise do
          hit = hit + 1
        end
      end
      if amp = 0
      then "seek '"find1"' next nx"
      else "seek x'"find1x"' next nx"
      if rc > 0 then leave
    end
  end

  /* ------------------------------ *
  | Remove hits from exclude count |
  * ------------------------------ */
  excl = excl - findhits

  if find2 = ''
  then if (last - excl) = 0 then 'Reset x'
  if find2 /= ''
  then if (last - excl) + hit = 0 then 'Reset x'

  /* ---------- *
  | Report out |
  * ---------- */
  text = last - excl 'hits out of' last+0 'records.'
  if find2 /= '' then
  text = text hit 'records found with both strings.'
  'line_before 1 = msgline (text)'
  text = 'String1:' find1
  space = left(' ',9)
  if find2 /= '' then do
    if length(text) > 40 then do
      'line_before 1 = msgline (text)'
      text = ''
      space = ''
    end
    if length(find2) > 40 then do
      'line_before 1 = msgline (text)'
      text = ''
      space = ''
    end
    text = text || space || 'String2:' find2
  end
  'line_before 1 = msgline (text)'
  if strip(findopt) /= '' then do
    text = 'Using find options:' findopt
    'line_before 1 = msgline (text)'
  end
  'cursor = 1'
  exit 0

Do_Help:
  li = loadispf()
  Address ISPExec
  "Select PGM(isptutor) Parm(onlyhelp)"
  x = dropispf(li)
  exit

/* -------------------------------------------- *
 | Inline ISPF Panel loaded by LOADISPF routine |
 | must remain a comment from >start to >end    |
 * -------------------------------------------- */
/*
>Start
>Panel onlyhelp
)Attr
@ type(text) hilite(reverse)
)Body Expand(\\)
%Tutorial+\-\-@ONLY ISPF Edit Command+-\-\%Tutorial
+Command ===>_zcmd
+
%ONLY+is an ISPF Edit command that will find all occurrences of a string
+and hide all records that do not include that string. An optional second
+string will further limit the display of records that include both strings
+
+Syntax: %ONLY+string-1 string-2 find-options
+      or%ONLY+?
+
+         ? will display this ISPF Tutorial
+         string-1 and string-2 must be enclosed in quotes if blanks included
+         * may only be in string-2
+         use of an & will make both string case sensitive
+         find-options are any find options (e.g. word prefix label column)%*+
+            %*+these only apply to string-1
+
+Examples:
+
+         ONLY EXEC PGM
+         - will display only JCL statements that exec a program and not proc
+
)Init
)Proc
 &zcont = onlyhelp
)End
>End
*/

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    load_info = loadispf()                          *
 *            rc = dropispf(load_info)                        *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          rc = dropispf(load_info)                          *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            01/09/19 - Include DROPISPF routine             *
 *            08/29/17 - Fixup static values that were vars   *
 *            05/31/17 - Change default directory count       *
 *            12/09/16 - update for add_it routine            *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employeer.    *
 * ---------------------------------------------------------- */
LoadISPF: Procedure

  parse value "" with null kmsg kpanel kskel first returns ,
    kclist kexec
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
  last_line = sourceline()
  do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
  end
  rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
  do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
  end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
  Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
  clistdd = "lc"random(999)
  execdd  = "le"random(999)
  msgdd   = "lm"random(999)
  paneldd = "lp"random(999)
  skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
  if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd 'ALTLIBC')
  end
  if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd 'ALTLIBE')
  end
  if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd 'ISPMLIB')
  end
  if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd 'ISPPLIB')
  end
  if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd 'ISPSLIB')
  end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
  do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
      if first = 1 then call add_it
      type = "Clist"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">EXEC " then do
      if first = 1 then call add_it
      type = "Exec"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,5) = ">MSG " then do
      if first = 1 then call add_it
      type = "Msg"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,7) = ">PANEL " then do
      if first = 1 then call add_it
      type = "Panel"
      first = 1
      parse value record with x name
      iterate
    end
    if left(recordu,6) = ">SKEL " then do
      if first = 1 then call add_it
      type = "Skel"
      first = 1
      parse value record with x name
      iterate
    end
   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
      "LmPut dataid("clist") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Exec" then
      "LmPut dataid("exec") MODE(INVAR)" ,
        "DataLoc(record) DataLen(255)"
      When type = "Msg" then
      "LmPut dataid("msg") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Panel" then
      "LmPut dataid("panel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      When type = "Skel" then
      "LmPut dataid("skel") MODE(INVAR)" ,
        "DataLoc(record) DataLen(80)"
      Otherwise nop
    end
  end
  if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
  if kclist <> null then do
    Address TSO,
      "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
  end
  if kexec <> null then do
    Address TSO,
      "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
  end
  if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
  end
  if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
  end
  if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
  end
  return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
Add_It:
  Select
    When type = "Clist" then
    "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
    "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
    "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
    "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
    "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
  end
  type = null
  return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
Alloc_DD:
  arg dd
  Address TSO
  if pos(left(dd,2),"lc le") > 0 then
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(v b) lrecl(255) blksize(32760)"
  else
  "Alloc f("dd") unit(sysda) spa(5,5) dir(5)",
    "recfm(f b) lrecl(80) blksize(23440)"
  return

/* --------------------  rexx procedure  -------------------- *
 * Name:      DropISPF                                        *
 *                                                            *
 * Function:  Remove ISPF LIBDEF's and deactivate ALTLIB's    *
 *            that were created by the LoadISPF function.     *
 *                                                            *
 * Syntax:    rc = dropispf(load_info)                        *
 *                                                            *
 * Author:    Janko                                           *
 *                                                            *
 * History:                                                   *
 *            12/05/18 - Creation                             *
 * ---------------------------------------------------------- */
DropISPF: Procedure
  arg load_info
  Address ISPEXEC
  do until length(load_info) = 0
    parse value load_info with dd libd load_info
    if left(libd,6) = "ALTLIB" then do
      if libd = "ALTLIBC" then lib = "CLIST"
      else lib = "EXEC"
      Address TSO,
        "Altlib Deact Application("lib")"
    end
    else "libdef" libd
    address tso "free f("dd")"
  end
  return 0
